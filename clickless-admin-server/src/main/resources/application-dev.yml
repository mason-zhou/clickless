# 数据源配置
spring:
  # redis 配置
  redis:
    # 地址
    host: 127.0.0.1
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms

  datasource:
    druid:
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: admin
        url-pattern: /druid/*
    dynamic:
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      p6spy: true #打印编译后SQL,默认false,生产环境建议关闭
      druid: # 以下是druid数据源全局配置
        # 初始连接数
        initialSize: 5
        # 最小连接池数量
        minIdle: 10
        # 最大连接池数量
        maxActive: 20
        # 配置获取连接等待超时的时间
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        # 配置一个连接在池中最大生存的时间，单位是毫秒
        maxEvictableIdleTimeMillis: 900000
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          multi-statement-allow: true

      # 指定主数据源
      primary: master
      datasource:
        # 主库数据源
        master:
          driverClassName: org.postgresql.Driver
          url: jdbc:postgresql://127.0.0.1:5432/clickless_github?reWriteBatchedInserts=true
          username: 'postgres'
          password: 'postgres'
          p6spy: true # 如果这个库不需要可单独关闭。
          druid: # 以下是针对单个数据源独立配置,每个库可以单独设置
            validationQuery: SELECT VERSION()
        # 从库数据源
        slave:
          lazy: true
          driverClassName:
          url:
          username:
          password:

  # activiti配置
  activiti:
    #自动更新数据库结构
    # true：适用开发环境，默认值。activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建
    # false：适用生产环境。activiti在启动时，对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常
    # create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）
    # drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
    database-schema-update: true
    # activiti7与springboot整合后默认不创建历史表，需要手动开启
    db-history-used: true
      # 记录历史等级 可配置的历史级别有none, activity, audit, full
    # none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。
    # activity：级别高于none，保存流程实例与流程行为，其他数据不保存。
    # audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。
    # full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。
    history-level: full
    # 是否自动检查resources下的processes目录的流程定义文件
    check-process-definitions: false
    # smtp服务器地址
    mail-server-host: smtp.qq.com
    # SSL端口号
    mail-server-port: 465
    # 开启ssl协议
    mail-server-use-ssl: true
    # 默认的邮件发送地址（发送人），如果activiti流程定义中没有指定发送人，则取这个值
    mail-server-default-from: abcdefg@qq.com
    # 邮件的用户名
    mail-server-user-name: abcdefg@qq.com
    # qq的smtp服务相关的授权码
    mail-server-password: xxx填写自己qq邮箱的smtp授权码
    # 关闭不自动添加部署数据 SpringAutoDeployment
    deployment-mode: never-fail
